// package main

// import (
// 	"bufio"
// 	"fmt"
// 	"net"
// 	"strconv"
// 	"strings"
// 	"sync"
// )

// type RESPParser struct{}

// var wg sync.WaitGroup

// func main() {
// 	listener, err := net.Listen("tcp", ":6379")
// 	if err != nil {
// 		fmt.Println("Error:", err)
// 		return
// 	}
// 	defer listener.Close()

// 	fmt.Println("Listening on :6379...")
// 	for {
// 		conn, err := listener.Accept()
// 		if err != nil {
// 			fmt.Println("Error:", err)
// 			continue
// 		}
// 		wg.Add(1)

// 		go handleConnection(conn)

// 	}
// 	wg.Wait()

// }

// func handleConnection(conn net.Conn) {
// 	defer func() {
// 		conn.Close()
// 		wg.Done()
// 	}()

// 	fmt.Println("Accepted connection from:", conn.RemoteAddr())
// 	scanner := bufio.NewScanner(conn)
// 	for scanner.Scan() {
// 		command := scanner.Text()

// 		Resper := RESPParser{}
// 		elements, _ := Resper.parse(command)
// 		if elements != nil {
// 			switch val := elements.(type) {
// 			case []interface{}:
// 				if len(val) > 0 {
// 					switch strings.ToLower(val[0].(string)) {
// 					case "echo":
// 						response := "is is echo string"
// 						conn.Write([]byte(response))

// 					case "ping":
// 						response := "+PONG\r\n"
// 						conn.Write([]byte(response))
// 					}

// 				}
// 			case string:
// 				response := "+PONG\r\n"
// 				conn.Write([]byte(response))
// 			}

// 		}

// 		// if strings.ToUpper(command) == "PING" {
// 		// 	response := "+PONG\r\n"
// 		// 	conn.Write([]byte(response))
// 		// 	fmt.Printf("Received: %s, Sent: %s", command, response)
// 		// }
// 	}
// }

// // func (RS *RESPParser) parse(RespSting string) (element interface{}, remain string) {
// // 	if RespSting == "" {
// // 		return nil, RespSting
// // 	}
// // 	switch RespSting[0] {
// // 	case '$':
// // 		return RS.stringParser(RespSting)
// // 	case '*':
// // 		return RS.listParser(RespSting)
// // 	}
// // 	return nil, RespSting
// // }

// func (RS *RESPParser) stringParser(RespString string) (string, string) {
// 	if strings.HasPrefix(RespString, "$") {
// 		parts := strings.SplitN(RespString[1:], "\r\n", 2)
// 		leng, err := strconv.Atoi(parts[0])

// 		if err != nil {
// 			return "", RespString
// 		}
// 		data := parts[1]

// 		if len(data) >= leng+2 {
// 			return data[:leng], data[leng+2:]
// 		}
// 	}

// 	return "", RespString

// }

// func (RS *RESPParser) listParser(RespString string) ([]interface{}, string) {
// 	if strings.HasPrefix(RespString, "*") {
// 		// Find the end of the count part
// 		countEnd := strings.Index(RespString[1:], "\r\n")
// 		if countEnd == -1 {
// 			return nil, RespString
// 		}

// 		// Parse the count
// 		count, err := strconv.Atoi(RespString[1 : countEnd+1])
// 		if err != nil {
// 			return nil, RespString
// 		}

// 		data := RespString[countEnd+3:]
// 		elements := make([]interface{}, count)

// 		for i := 0; i < count; i++ {
// 			// Check if there is enough data left to parse
// 			if len(data) < 2 {
// 				return nil, RespString
// 			}

// 			element, remainingData := RS.parse(data)
// 			elements[i] = element
// 			data = remainingData
// 		}
// 		return elements, data
// 	}

// 	return nil, RespString
//


remote: [stage-4] Test passed.
remote: [stage-4] Terminating program
remote: [stage-4] Program terminated successfully
remote: 
remote: [stage-5] Running tests for Stage #5: Implement the ECHO command
remote: [stage-5] $ ./spawn_redis_server.sh
remote: [your_program] Listening on :6379...
remote: [stage-5] $ redis-cli echo raspberry
remote: [stage-5] Sent bytes: "*2\r\n$4\r\necho\r\n$9\r\nraspberry\r\n"
remote: [stage-5] Reading response...
remote: [stage-5] Received bytes: "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
remote: [stage-5] Received: "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
remote: [stage-5]            ^ error
remote: [stage-5] Error: "\x00" is not a valid start of a RESP value (expected +, -, :, $ or *)
remote: [stage-5] Test failed
remote: [stage-5] Terminating program
remote: [stage-5] Program terminated successfully
remote: 
remote: View stage instructions: https://app.codecrafters.io/courses/redis.
remote: 
To https://git.codecrafters.io/b0813840bfe4ce74
   9a15735..35b4bd9  master -> master